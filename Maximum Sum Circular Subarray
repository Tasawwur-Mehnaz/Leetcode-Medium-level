Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and 
the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], 
there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.


Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.


Solution:


class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
        int n=nums.size();
        int curmin=0,curmax=0,maxsum=nums[0],minsum=nums[0],totalsum=0;
        int maxiele=INT_MIN;
        bool flag=false;
        for(int i=0;i<n;i++)
        {
            totalsum+=nums[i];
            curmin=min(curmin+nums[i],nums[i]);
            curmax=max(curmax+nums[i],nums[i]);
            minsum=min(minsum,curmin);
            maxsum=max(maxsum,curmax);

            if(nums[i]>0)
             flag=true;
            maxiele=max(maxiele,nums[i]);
        }
        if(!flag)
          return maxiele;
        return max(maxsum,totalsum-minsum);

    }
};



OR 

int maxSubarraySumCircular(vector<int>& nums) {
        int n=nums.size();
        int curmin=0,curmax=0,maxsum=nums[0],minsum=nums[0],totalsum=0;
        for(int i=0;i<n;i++)
        {
            totalsum+=nums[i];
            curmin=min(curmin+nums[i],nums[i]);
            curmax=max(curmax+nums[i],nums[i]);
            minsum=min(minsum,curmin);
            maxsum=max(maxsum,curmax);

        }
        return maxsum>0?max(maxsum,totalsum-minsum): maxsum;
    }
