Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. 
Answers within 10-5 of the actual answer will be accepted.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].

Solution:
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> ans;
        ans.push_back(root->val/1);
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            
            int n=q.size();
            double sum=0;
            int c=0;
            while(n--)
            {
            
               TreeNode* node=q.front();
               q.pop();
                
               if(node->left) 
               {
                q.push(node->left);
                sum+=node->left->val;
                c++;
               }
               if(node->right)
               {
                q.push(node->right);
                sum+=node->right->val;
                c++;
               }
                
            }
            if(c>0)
              ans.push_back(sum/c);
        }
        return ans;
    }
};

OR

class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            int n=q.size();
            double sum=0;
            int t=n;
            while(n--)
            {
               TreeNode* node=q.front();
               q.pop();
                
               if(node->left) 
               {
                q.push(node->left);
                
               }
               if(node->right)
               {
                q.push(node->right);
               
               }
                sum+=node->val;
            }
  
              ans.push_back(sum/t);
        }
        return ans;
    }
};
