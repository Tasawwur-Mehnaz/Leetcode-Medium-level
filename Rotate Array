Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Solution:

Using extra space:
Straight forward

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        if(n==1)
            return;
        k=k%n;
        vector<int> v=nums;
        nums.clear();
        for(int i=n-k;i<n;i++)
        {
            nums.push_back(v[i]);
        }
        for(int i=0;i<n-k;i++)
        {
            nums.push_back(v[i]);
        }
       
        return;
    }
};

OR

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k%=n;
        if(n==1 || k==0)
            return;
        vector<int> v(k);
        int j=0;
        for(int i=n-k;i<n;i++)
        {
            v[j]=nums[i];
            j++;
        }
        int x=n-1;
        for(int i=n-k-1;i>=0;i--)
        {
            nums[x]=nums[i];
            x--;
        }
        for(int i=0;i<k;i++)
        {
            nums[i]=v[i];
        }
        return;
    }
};


without using extra space:

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        if(n==1 || k==0)
            return;
        k%=n;
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
        return;
    }
};
