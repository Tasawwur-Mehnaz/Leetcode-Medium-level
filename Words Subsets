You are given two string arrays words1 and words2.
A string b is a subset of string a if every letter in b occurs in a including multiplicity.
For example, "wrr" is a subset of "warrior" but is not a subset of "world".
A string a from words1 is universal if for every string b in words2, b is a subset of a.
Return an array of all the universal strings in words1. You may return the answer in any order.

Example 1:
Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["e","o"]
Output: ["facebook","google","leetcode"]

Solution:

class Solution {
public:
   
   combining words2 into one string : eo, ool, wo 
   then combined string would be: eoolw
   then we compare this string with every string in words1


   vector<int> freqprocess(string w)
    {
       vector<int> t(26,0);
       for(auto i: w)
       {
           t[i-'a']++;
       }
       return t;
    }
    
    
    vector<string> wordSubsets(vector<string>& words1, vector<string>& words2) {
        vector<string> ans;
        vector<int> freq(26,0);
        for(auto i: words2)
        {
            vector<int> tfreq=freqprocess(i);
            for(int i=0;i<26;i++)
            {
                freq[i]=max(freq[i],tfreq[i]);
                    
            }
        }
        for(auto i:words1)
        {
            vector<int> f=freqprocess(i);
            bool flag=true;
            for(int i=0;i<26;i++)
            {
                if(f[i]<freq[i])
                {
                    flag=false;
                    break;
                }
                    
            }
            if(flag)
                ans.push_back(i);
        }
        return ans;
    }
};
