An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.
Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

Example 1:
Input: changed = [1,3,4,2,6,8]
Output: [1,3,4]
Explanation: One possible original array could be [1,3,4]:
- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.
Other original arrays could be [4,3,1] or [3,1,4].

Solution:

class Solution {
public:
    vector<int> findOriginalArray(vector<int>& changed) {
        if(changed.size()%2!=0)
            return {};
        vector<int> original;
        unordered_map<int,int> m;
        for(auto i:changed)
        {
            m[i]++;
        }
        sort(changed.begin(),changed.end());
        for(auto j:changed)
        {
            if(j==0)
            {
                if(m[j]%2!=0)
                    return {};
            }
            if(m[j]>=1 && m[j*2]>=1)
            {
                m[j*2]--;
                m[j]--;
                original.push_back(j);
            } 
        }
        
        for(auto ele:m)
        {
            if(ele.second>=1)
                return {};
        }
        return original;
    }
};
