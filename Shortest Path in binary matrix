Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path

Input: grid = [[0,1],[1,0]]
Output: 2

Solution:

class Solution {
public:
  int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        if(grid[0][0]==1 or grid[n-1][n-1]==1)
          return -1;
        queue<pair<int,int>> q;
        vector<pair<int,int>> direction={{1,1}, {0,1}, {1,0}, {0,-1}, {-1,0}, {-1,-1}, {-1,1}, {1,-1}};
        grid[0][0]=1;
        q.push({0,0});
        while(!q.empty())
        {
            auto e=q.front();
            q.pop();
            int x=e.first;
            int y=e.second;
            if(x==n-1 and y==n-1)
                return grid[x][y];
            
            for(auto d:direction)
            {
                int nx=x+d.first;
                int ny=y+d.second;
                if(nx>=0 and ny>=0 and nx<n and ny<n and grid[nx][ny]==0)
                {
                    grid[nx][ny]=grid[x][y]+1;     //doing sum of hoping from one grid to another
                    q.push({nx,ny});
                }
            }
         }
       return -1;     
    }   
};
