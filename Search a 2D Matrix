Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Solution:

Binary Search:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        int l=0,h=row*col-1;
        while(l<=h)
        {
            int mid=(l+h)/2;
            if(matrix[mid/col][mid%col]==target)
                return true;
            else if(matrix[mid/col][mid%col]>target)
                h=mid-1;
            else
                l=mid+1;
        }
        return false;
    }
};

Another way, may be simpler:

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        int i;
        for(i=0;i<row;i++)
        {
            if(matrix[i][0]<=target && matrix[i][col-1]>=target)
                break;
        }
        if(i==row)
            return false;
        int l=0,h=col-1;
        while(l<=h)
        {
            int mid=(l+h)/2;
            if(matrix[i][mid]==target)
                return true;
            else if(matrix[i][mid]>target)
                h=mid-1;
            else
                l=mid+1;
        }
        return false;
    }
};
