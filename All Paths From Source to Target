Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.
The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).


Example 1:

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Solution:

BFS:
class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> ans;
        int n=graph.size()-1;
        unordered_map<int,vector<int>> g;
        for(int i=0;i<graph.size();i++)
        {
            for(auto e:graph[i])
            {
                g[i].push_back(e);
            }
        }
        queue<vector<int>> q;
        q.push({0});
        while(!q.empty())
        {
            vector<int> v=q.front();
            q.pop();
            if(v.back()==n)
              ans.push_back(v);
            else
            {
                for(auto i:g[v.back()])
                {
                    v.push_back(i);
                    q.push(v);
                    v.pop_back();
                }
            }
        }
        return ans;
    }
};


DFS:

class Solution {
public:
    void dfs(vector<vector<int>>& graph, vector<vector<int>>& ans, vector<int>& path, int cur)
    {
        path.push_back(cur);
        if(cur==graph.size()-1)
          ans.push_back(path);
        else
        {
            for(auto e:graph[cur])
            {
               dfs(graph,ans,path,e);
            }
        }
        path.pop_back();
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> ans;
        vector<int> path;
        dfs(graph,ans,path,0);
        
        return ans;
    }
};
