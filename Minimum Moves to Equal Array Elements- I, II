Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
In one move, you can increment n - 1 elements of the array by 1.

Example 1:
Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

class Solution {
public:
    int minMoves(vector<int>& nums) {
        int minele=INT_MAX;
        int n=nums.size();
        int sum=0;
        for(auto i:nums)
        {
            sum+=i;
            minele=min(minele,i);  
        }
        return sum-n*minele;
    }
};

PART-II

In one move, you can increment or decrement an element of the array by 1.

Input: nums = [1,2,3]
Output: 2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]


Solution:

class Solution {
public:
    int minMoves2(vector<int>& nums) {
        int ans=0;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int mid=nums[n/2];
        for(auto i: nums)
        {
             ans+=abs(mid-i);                                                          
        }
        return ans;
        
    }
};
