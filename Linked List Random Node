Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Implement the Solution class:
Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.
 

Example 1:


Input
["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.


Solution:

TC-O(N), SC-O(1)
Reservoir Sampling: Every node will have probability of 1/n to be selected

class Solution {
public:
    ListNode* t;
    Solution(ListNode* head) {
       t=head;
    }
    
    int getRandom() {
       int ans,i=1;
       ListNode* h=t;
       while(h)
       {
           if(rand()%i==0)
             ans=h->val;
           i++;
           h=h->next;
       }
       return ans;
    }
};


TC-O(N), SC-O(N)
Using vector

class Solution {
public:
    vector<int> v;
    Solution(ListNode* head) {
        ListNode* t=head;
        while(t!=NULL)
        {
            v.push_back(t->val);
            t=t->next;
        }
    }
    
    int getRandom() {
       int i=rand()%v.size();
       return v[i];
    }
};
