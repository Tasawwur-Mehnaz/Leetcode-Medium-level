ou are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

Solution:

class Solution {
public:
    typedef pair<int,int> pii;
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> g(n+1);
        for(const auto &vec: times)
        {
            g[vec[0]].push_back({vec[1],vec[2]});
        }
        const int inf=1000;   // int ques weight contraint is 100 so 1000 is like infinity
        vector<int> dist(n+1,inf);
        vector<bool> visited(n+1,false);
        priority_queue<pii, vector<pii>, greater<pii> > pq;
        dist[k]=0;
        pq.emplace(0,k);
        while(pq.size()>0)
        {
            auto node=pq.top();
            int v_dist=node.first;
            int v_node=node.second;
            pq.pop();
            if(visited[v_node])
                continue;
            visited[v_node]=true;
            for(auto child: g[v_node])
            {
                int child_node=child.first;
                int child_dist=child.second;
                if(v_dist+child_dist < dist[child_node])
                {
                    dist[child_node]=v_dist+child_dist;
                    pq.emplace(dist[child_node],child_node);
                }
            }
        }
        int ans=*max_element(dist.begin()+1,dist.end());
     
       return ans==inf ? -1:ans;
    }
};

Another alternative way of writing the code:

class Solution {
public:
    const int N = 1e5+10;

    int dijkstra(int k, int n, vector<pair<int,int>> g[])
    {
        vector<int> visited(N,0);
        vector<int> dist(N,N);
        set<pair<int,int>> s;
        dist[k]=0;
        s.insert({0,k});
        while(s.size()>0)
        {
            auto node=*s.begin();
            int v_node=node.second;
            int v_dist=node.first;
            s.erase(s.begin());
            if(visited[v_node]==1)
                continue;
            visited[v_node]=1;
            for(auto child: g[v_node])
            {
                int child_node=child.first;
                int child_dist=child.second;
                if(dist[v_node]+child_dist<dist[child_node])
                {
                    dist[child_node]=dist[v_node]+child_dist;
                    s.insert({dist[child_node],child_node});
                }
            }
        }
        int ans=0;
        for(int i=1;i<=n;i++)
        {
            if(dist[i]==N)
                return -1;
            ans=max(ans,dist[i]);
        }
        return ans;
        }
        
    
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int,int>> g[N];
        for(auto i:times)
        {
            g[i[0]].push_back({i[1],i[2]});
        }
        return dijkstra(k,n,g);
        
    }
};
