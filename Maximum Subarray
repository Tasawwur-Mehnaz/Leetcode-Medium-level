Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
A subarray is a contiguous part of an array.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Solution:

Along with sum, this code also print that subarray.

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        int ans=INT_MIN;
        int s=0;
        vector<int> subarray;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            if(sum>ans)
            {
                ans=sum;
                subarray.clear();
                subarray.push_back(s);
                subarray.push_back(i);
            }
          
            if(sum<0)
            {
                sum=0;
                s=i+1;
            } 
        }
        for(int i=subarray[0];i<=subarray[1];i++)
        {
            cout<<nums[i]<<" ";
        }
        cout<<endl;
        return ans;
    }
};

Only giving sum

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum=0,ans=nums[0];
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            ans=max(ans,sum);
            if(sum<0)
                sum=0;
        }
        return ans;
    }
};
