Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]


Solution:


class Solution {
public:
   bool ispalindrome(string s)
   {
       string t=s;
       reverse(t.begin(),t.end());
       return t==s;
   }
    void process(string s,vector<vector<string>> &ans,vector<string>&temp)
    {
        if(s.length()==0)
        {
            ans.push_back(temp);
            return;
        }
        for(int i=0;i<s.length();i++)
        {
            if(ispalindrome(s.substr(0,i+1)))
            {
                temp.push_back(s.substr(0,i+1));
                process(s.substr(i+1),ans,temp);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        process(s,ans,temp);
        return ans;
    }
};
