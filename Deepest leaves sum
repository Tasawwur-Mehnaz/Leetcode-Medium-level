Given the root of a binary tree, return the sum of values of its deepest leaves.
 
Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15

class Solution {
public:
    int maxdepth(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        int l=maxdepth(root->left);
        int r=maxdepth(root->right);
        if(l>r)
            return l+1;
        return r+1;
    }
    int levelorder(TreeNode* root, int height)
    {
        int sum=0;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            if(node!=NULL)
            {
              if(height==1)
                sum+=node->val;
              if(node->left)
               {
                q.push(node->left);
               }
               if(node->right)
               {
                 q.push(node->right);
               }
            }
            else if(!q.empty())
            { 
              q.push(NULL);
              height--;
            }
            
        }
            return sum;
    }
    int deepestLeavesSum(TreeNode* root) {
        int height=maxdepth(root);
        int ans=levelorder(root,height);
        return ans;
    }
};
