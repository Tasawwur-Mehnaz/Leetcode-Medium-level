You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"


solution:

class Solution {
public:
    string process(string s,stack<pair<char,int>>& st, int k)
    {   
        string a="";
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            if(st.empty() or st.top().first!=s[i])
            {   
                st.push({s[i],1});
            }
            else
            {
                auto p=st.top();
                st.pop();
                st.push({s[i],p.second+1});
            }
           
            if(st.top().second==k)
            {
                   st.pop();
            } 
        }
        while(!st.empty())
        {
            auto p=st.top();
            while(p.second--)
            {
               a.push_back(st.top().first);
            }
            st.pop();
        }
       
    return a;
        
    }

    string removeDuplicates(string s, int k) {
        stack<pair<char,int>> st;
        string ans="";
        ans=process(s,st,k);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};



