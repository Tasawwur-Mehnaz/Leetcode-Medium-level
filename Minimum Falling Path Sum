Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.


Solution:

class Solution {
public:
    int minofthree(int a,int b,int c)
    {
        a=min(a,b);
        a=min(a,c);
        return a;
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int r=matrix.size();
        int c=matrix[0].size();
        for(int i=1;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(j==0)
                {
                    matrix[i][j]+=min(matrix[i-1][j],matrix[i-1][j+1]);
                }
                else if(j==c-1)
                {
                    matrix[i][j]+=min(matrix[i-1][j],matrix[i-1][j-1]);
                }
                else
                {
                    matrix[i][j]+=minofthree(matrix[i-1][j],matrix[i-1][j-1],matrix[i-1][j+1]);
                }
            }
        }
        int ans=INT_MAX;
        for(int j=0;j<c;j++)
        {
            ans=min(ans,matrix[r-1][j]);
        }
        return ans;
    }
};
