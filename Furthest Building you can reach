You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.
You start your journey from building 0 and move to the next building by possibly using bricks or ladders.
While moving from building i to building i+1 (0-indexed),

If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

Example 1:


Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4

Solution:

class Solution {
public:
    int furthestBuilding(vector<int>& nums, int bricks, int ladders) {
        int n=nums.size();
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i=0;i<n-1;i++)
        {   int diff=nums[i+1]-nums[i];         
            if(diff>0)
            {
                pq.push(diff);
                if(pq.size()>ladders)
                {
                    
                    int t=pq.top();
                    pq.pop();
                    bricks-=t;
                   
                }
                if(bricks<0) 
                 return i;
            }
        }
        return n-1;
    }
};


or


class Solution {
public:
    int furthestBuilding(vector<int>& nums, int bricks, int ladders) {
        vector<int> diff;
        int n=nums.size();
        int ans=0;
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i=1;i<n;i++)
        {            
            if(nums[i]-nums[i-1]>0)
            {
                pq.push(nums[i]-nums[i-1]);
                if(pq.size()>ladders)
                {
                    int t=pq.top();
                    pq.pop();
                    bricks-=t;
                   
                }
                if(bricks<0)
                {
                    return i-1;
                    break;
                }
                
            }
        }
        return n-1;

    }
};
