Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.


Solution:

class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char,int> m;
        priority_queue<pair<int,char>> pq;
        string ans="";
        for(auto i:s)
        {
            m[i]++;
        }
        for(auto e:m)
        {
           pq.push({e.second,e.first});
        }
        while(pq.size()>0)
        {
            int t=pq.top().first;
            char a=pq.top().second;
            pq.pop();
            while(t--)
            {
                ans+=a;
            }

        }
        return ans;
    }
};
