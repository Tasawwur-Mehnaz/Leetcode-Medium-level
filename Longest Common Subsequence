Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.
 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.


Solution:


class Solution {
public:
    int process(int i,int j,string &t1, string &t2,vector<vector<int>> &dp)
    {
        if(i<0 || j<0)
          return 0;
        if(dp[i][j]!=-1)
          return dp[i][j];
        if(t1[i]==t2[j])
          return dp[i][j]=1+process(i-1,j-1,t1,t2,dp);
        else
          return dp[i][j]= max(0+process(i-1,j,t1,t2,dp),0+process(i,j-1,t1,t2,dp));
        
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.length(),m=text2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return process(n-1,m-1,text1,text2,dp);
    }
};
