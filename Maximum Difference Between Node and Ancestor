Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.
A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.

Solution:

class Solution {
public:
    int process(TreeNode* root, int mini, int maxi)
    {
        if(root==NULL)
          return maxi-mini;
        maxi=max(maxi,root->val);
        mini=min(mini,root->val);
        int l=process(root->left,mini,maxi);
        int r=process(root->right,mini,maxi);
        return max(l,r);
    }
    int maxAncestorDiff(TreeNode* root) {
        int mini=100000,maxi=0;
        return process(root,mini,maxi);
    }
};
