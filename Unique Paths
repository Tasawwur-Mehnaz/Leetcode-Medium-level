There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Solution:
using dp: SC,TC-O(n*m)

class Solution {
public:
    int process(int i,int j,int m,int n, vector<vector<int>> &dp)
    {
        if(i>=m || j>=n)
            return 0;
        if(i==(m-1) && j==(n-1))
            return 1;
        if(dp[i][j]!=-1)
            return dp[i][j];
        else 
            return dp[i][j]=process(i+1,j,m,n,dp)+process(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,-1));
        int ans=process(0,0,m,n,dp);
        return ans;
    }
};


Using Combination
TC-O(n-1) or O(m-1)
SC-O(1)

class Solution {
public:
    int uniquePaths(int m, int n) {
        int t=m+n-2;
        int r=m-1;
        double ans=1;
        for(int i=1;i<=r;i++)
        {
            ans=ans*(t-r+i)/i;
        }
        return int(ans);
    }
};
