Given the head of a singly linked list where elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.

 

Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.


Solution:

Using array:

class Solution {
public:
    TreeNode* buildtree(vector<int> &arr,int start,int end)
    {
        if(start>end)
        return NULL;
        int mid=(start+end)/2;
        TreeNode* t=new TreeNode(arr[mid]);
        t->left=buildtree(arr,start,mid-1);
        t->right=buildtree(arr,mid+1,end);
        return t;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        ListNode* temp=head;
        vector<int> arr;
        while(temp!=NULL)
        {
           arr.push_back(temp->val);
           temp=temp->next;
        }
        return buildtree(arr,0,arr.size()-1);
    }
};



Using only linked list SC-O(1)

class Solution {
public:
    
    TreeNode* sortedListToBST(ListNode* head) {
        if(head==NULL)
          return NULL;
        ListNode* fast=head;
        ListNode* slow=head;
        ListNode* prev=NULL;
        while(fast!=NULL && fast->next!=NULL)
        {
            fast=fast->next->next;
            prev=slow;
            slow=slow->next;
        }
        TreeNode* ans=new TreeNode(slow->val);
        if(prev!=NULL)
          prev->next=NULL;
        else
          head=NULL;
        ans->left=sortedListToBST(head);
        ans->right=sortedListToBST(slow->next);
        return ans;
    }
};
