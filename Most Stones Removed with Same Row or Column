On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5

Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.


Solution:

class Solution {
public:
    bool checksamegrp(vector<int> &s1,vector<int> &s2)
    {
       if(s1[0]==s2[0] || s1[1]==s2[1])
         return true;
       return false;
    }
   void dfs(int ind, vector<bool> &vis, vector<vector<int>>& stones)
   {
       vis[ind]=true;
       for(int i=0;i<stones.size();i++)
       {
           if(!vis[i] && checksamegrp(stones[i],stones[ind]))
            dfs(i,vis,stones);
       }

   }
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        vector<bool> vis(n,false);
        int s=0;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                s++;
                dfs(i,vis,stones);
            }
              
        }
        return n-s;

    }
};
