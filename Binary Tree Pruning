Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
A subtree of a node node is node plus every node that is a descendant of node.

Example 1:
Input: root = [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.


Solution:

class Solution {
public:
    
    TreeNode* pruneTree(TreeNode* root) {
       if(root!=NULL)
       {
        root->left=pruneTree(root->left);
        root->right=pruneTree(root->right);
        if(root->val==0 and root->left==NULL and root->right==NULL)
            return NULL;
       }
        return root;
        
    }
};

OR

class Solution {
public:
    
    bool process(TreeNode* root)
    {
        if(root==NULL)
            return false;
      
        bool l=process(root->left);
        bool r=process(root->right);
        if(!l)                
            root->left=NULL;
        if(!r)
            root->right=NULL;
        return l || r || root->val==1;
    }
    TreeNode* pruneTree(TreeNode* root) {
       return process(root)? root: NULL;
    }
};
