Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Solution:

A very unique approach to this simple ques would be using slow and fast pointer and detect the cycle as we do in linked list. Then reset the fast pointer to begining
and then increase slow and fast pointer 1 step at a time. Wherever both pointer meet,that will be the duplicate number.

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow=nums[0];
        int fast=nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
};

General approach would be using hash map and if the frequency of any number is more than 1 then it would be duplicate.
we can also use visited array while checking the number visited only once.

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        vector<bool> visited(n,false);
        for(int i=0;i<n;i++)
        {
            if(visited[nums[i]])
                return nums[i];
            visited[nums[i]]=true;
        }
        return 0;
    }
};
