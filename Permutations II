Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order. 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


SOLUTION: using hash map due to duplicate numbers.

class Solution {
public:
    vector<vector<int>> ans;
    void process(vector<int> temp,unordered_map<int,int> &m, int n)
    {
        if(n==temp.size())
        {
            ans.push_back(temp);
            return;
        }
        for(auto [key,value]:m)
        {
            if(value==0)
                continue;
            
            temp.push_back(key);
            m[key]--;
            process(temp,m,n);
            temp.pop_back();
            m[key]++;
        }
        
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        int n=nums.size();
        vector<int> temp;
        unordered_map<int,int> m;
        for(auto i:nums)
        {
            m[i]++;
        }
        process(temp,m,n);
    
        return ans;
    }
};
