You have n dice and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways)
to roll the dice so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.


Example 1:
Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.

Example 2:
Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.

Solution: bottom up approach (memoization)

class Solution {
public:
    int solve(int d, int f, int target, vector<vector<int>>& dp)
    {
        if(d==0 && target!=0)
            return 0;
        if(d!=0 && target==0)
            return 0;
        if(target==0 && d==0)
            return 1;
        if(dp[d][target]!=-1)
            return dp[d][target];
        int ans=0;
        for(int i=1;i<=f;i++)
        {
            if(target-i>=0)
            ans=(ans+(solve(d-1,f,target-i,dp))%1000000007)%1000000007;
        }
        return dp[d][target]=ans;
    }
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(n+1,vector<int>(target+1,-1));
        return solve(n,k,target,dp);
 
    }
};


top down approach (tabulation):

class Solution {
public:
    
    int solvetab(int d, int f, int t)
    {
        vector<vector<int>> dp(d+1,vector<int>(t+1,0));
        dp[0][0]=1;
        for(int dice=1;dice<=d;dice++)
        {
            for(int target=1;target<=t;target++)
            {
               int ans=0;
               for(int i=1;i<=f;i++)
               {
                   if(target-i>=0)
                     ans=(ans+dp[dice-1][target-i]%1000000007)%1000000007;
               }
                dp[dice][target]=ans;
                
            }
        }
        return dp[d][t];
    }
    int numRollsToTarget(int n, int k, int target) {
        return solvetab(n,k,target);
 
    }
};
