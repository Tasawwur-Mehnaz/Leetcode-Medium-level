Given an array of strings words and an integer k, return the k most frequent strings.
Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.


Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.


Solution:

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        map<string,int> m;
        vector<string> ans;
        for(auto i:words)
        {
            m[i]++;
        }
        priority_queue<pair<int,string>, vector<pair<int,string>>, compare1> pq;
        for(auto i:m)
        {
            pq.push({i.second,i.first});
            if(pq.size()>k)
                pq.pop();
        }
        
        while(!pq.empty())
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
    private:
    struct compare1
    {
       bool operator() (const pair<int,string> &a, const pair<int,string> &b)
       {
          if(a.first==b.first)
              return a.second<b.second;
          else
              return a.first>b.first;
       }     
    };
};
