Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.
We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.
Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.

Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].

Solution:

sort the array first and then storing the count along with the element of array in map so that we can find the factors of element.
count represents the no of tree can be made if the element would be root.


Solution:

class Solution {
public:
    int mod=1e9+7;
    int numFactoredBinaryTrees(vector<int>& arr) {
        map<int,long> m;
        sort(arr.begin(),arr.end());
        m[arr[0]]=1;
        for(int i=1;i<arr.size();i++)
        {
            long count=1;
            for(auto j:m)
            {
                int e=j.first;
                if(arr[i]%e==0 and m.find(arr[i]/e)!=m.end())
                    count+=m[arr[i]/e]*m[e];
            }
            m[arr[i]]=count;
        }
        
        long ans=0;
        for(auto x:m)
        {
            ans+=x.second;   or // ans=(ans+x.second)%mod;
        }
        
        return ans%mod;      or // return ans;
        
    }
    
};


DP solution:

int numFactoredBinaryTrees(vector<int>& A) {
        long ans = 0, mod = pow(10, 9) + 7;
        sort(A.begin(), A.end());
        unordered_map<int, long> dp;
        for (int i = 0; i < A.size(); ++i) {
            dp[A[i]] = 1;
            for (int j = 0; j < i; ++j)
                if (A[i] % A[j] == 0)
                    dp[A[i]] = (dp[A[i]] + dp[A[j]] * dp[A[i] / A[j]]);
            ans = (ans + dp[A[i]]) % mod;
        }
        return ans;
    }
