Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

Example 1:
Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].

Solution:

using dp:

2D dp

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>> dp(nums1.size()+1,vector<int>(nums2.size()+1,0));
        int ans=0;
        int n=nums1.size();
        int m=nums2.size();
        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
                if(nums1[i]==nums2[j])
                    dp[i][j]=dp[i+1][j+1]+1;
                ans=max(ans,dp[i][j]);
            }
            
        }
        return ans;
    }
};

1D dp

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()<nums2.size())
            swap(nums1,nums2);
        int m=nums1.size();  //bigger
        int n=nums2.size();  //smaller one
        vector<int> dp(n+1,0);
        int ans=0;
        for(int i=0;i<m;i++)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(nums1[i]==nums2[j])
                    dp[j+1]=dp[j]+1;
                else
                    dp[j+1]=0;
                ans=max(ans,dp[j+1]);
            }
        }
        return ans;
    }
};

using sliding window

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size();
        int n=nums2.size();
        int ans=0;
        for(int i=-n+1;i<m;i++)
        {
            int count=0;
            for(int j=0;j<n;j++)
            {
                if(i+j<0)
                    continue;
                else if(i+j>=m)
                    break;
                else if(nums1[i+j]==nums2[j])
                {
                    count++;
                    ans=max(ans,count);
                }
                else
                    count=0;
            }
        }
        return ans;
    }
};
