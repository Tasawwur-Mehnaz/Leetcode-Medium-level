Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.
Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

Example 1:

Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], 
the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] 
can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).

Solution:

class Solution {
public:
    int ans=0;
    void dfs(TreeNode* root,unordered_map<int,int> &m)
    {
        if(root==NULL)
            return;
        m[root->val]++;
        dfs(root->left,m);
        dfs(root->right,m);
        if(root->left==NULL && root->right==NULL)
        {
            int c=0;
            for(auto i:m)
            {
                if(i.second%2)
                    c++;
            }
            if(c<=1)
                ans++;
        }
        m[root->val]--;
        
    }
    int pseudoPalindromicPaths (TreeNode* root) {
       unordered_map<int,int> m; or vector<int> m(10,0);
       dfs(root,m);
       return ans;
    }
};
