Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.
The test cases are generated so that the answer can fit in a 32-bit integer.
 
Example 1:
Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.

Solution:

Memoization:

class Solution {
public:
    int process(vector<int>& nums, int target,vector<int>& dp)
    {
        if(target<0)
            return 0;
        if(target==0)
            return 1;
        if(dp[target]!=-1)
            return dp[target];
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=process(nums,target-nums[i],dp);
        }
        dp[target]=sum;
        return dp[target];
    }
    int combinationSum4(vector<int>& nums, int target) {
        vector<int> dp(target+1,-1);
        int ans=process(nums,target,dp);
        return ans;
    }
};

Tabulation:

class Solution {
public:
    int process(vector<int>& nums, int tar)
    {
        vector<long> dp(tar+1);
        dp[0]=1;
        
        for(int i=1;i<=tar;i++)
        {
            dp[i]=0;
            for(int j=0;j<nums.size();j++)
            {
                if(i>=nums[j])
                   dp[i]+=dp[i-nums[j]];
                if(dp[i]>INT_MAX)
                    break;
            }
           
        }
        
      return dp[tar];
    }
    int combinationSum4(vector<int>& nums, int target) {
        
        return process(nums,target);
      
    }
};


