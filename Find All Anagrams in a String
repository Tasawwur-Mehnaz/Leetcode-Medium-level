Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".


Solution:

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> ans;
        int k=p.length(),n=s.length();
        if(k>n)
           return ans;
        vector<int> vp(26,0);
        vector<int> vs(26,0);
        for(auto i:p)
          vp[i-'a']++;
        
        int i=0,j=0;
        while(j<n)
        {
            vs[s[j]-'a']++;
            if((j-i+1)==k)
            {
                if(vs==vp)
                  ans.push_back(i);
            }
            if((j-i+1)<k)
            {
                j++;
            }
            else
            {
                vs[s[i]-'a']--;
                i++;
                j++;
            }
        }
        return ans;
    }
};
