Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level 
and alternate between).

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []


Solution:

Same as level order traversal, just on odd level (starting from 0) vector should be in reverse way.


class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
       vector<vector<int>> ans;
        if(root==NULL)
            return ans;
        queue<TreeNode*> q;
        q.push(root);
        int level=-1;
        while(!q.empty())
        {
            vector<int> v;
            int n=q.size();
         
            for(int i=0;i<n;i++)
            {    
                TreeNode* node=q.front();
                q.pop();
                if(node->left)
                {
                  q.push(node->left);  
                }
                if(node->right)
                {  
                   q.push(node->right);    
                }
                v.push_back(node->val);
            }
            level++;
            if(level%2!=0)
            {
                reverse(v.begin(),v.end());
            }
            ans.push_back(v);
        }

        return ans; 
    }
};
