You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round,
you can complete either 2 or 3 tasks of the same difficulty level.
Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.


Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.


Solution:

class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        unordered_map<int,int> m;
        int ans=0;
        for(auto i:tasks)
          m[i]++;
        for(auto t:m)
        {
            if(t.second==1)
              return -1;
            else if(t.second%3==0)
              ans+=t.second/3;
            else if(t.second%3!=0)
            {
                int a=t.second/3;
                int b=t.second%3;
                if(b==1)  
                {
                    ans+=a-1+(b+3)/2;   //for 7 freq: we split as 3+2+2 so (b+3)/2=2, thus it will be simplied as ans+=a-1+2 => ans+=a+1
                }
                else    //remainder=2
                {
                     ans+=a+b/2;   // ans+=a+1
                }
            }
        }
        return ans;
    }
};
