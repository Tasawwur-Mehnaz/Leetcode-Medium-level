You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.

Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],
                [0,0,0,0,0,0,0,1,1,1,0,0,0],
                [0,1,1,0,1,0,0,0,0,0,0,0,0],
                [0,1,0,0,1,1,0,0,1,0,1,0,0],
                [0,1,0,0,1,1,0,0,1,1,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,0,0],
                [0,0,0,0,0,0,0,1,1,1,0,0,0],
                [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.


Solution:

class Solution {
public:
    
    void dfs(int i,int j,int r,int c,vector<vector<int>>& grid,int &area)
    {
        if(i<0 || i>=r || j<0 || j>=c || grid[i][j]==0)
            return;
        
            grid[i][j]=0;
            area++;
        
            dfs(i+1,j,r,c,grid,area);
            dfs(i-1,j,r,c,grid,area);
            dfs(i,j+1,r,c,grid,area);
            dfs(i,j-1,r,c,grid,area);
                   
    }
  
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        int ans=0;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
               
                if(grid[i][j]==1)
                {   
                    int area=0;
                    dfs(i,j,row,col,grid,area);
                    ans=max(area,ans);
                }
            }
        }
        return ans;
    }
};
