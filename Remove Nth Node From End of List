Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Solution:

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL)
            return head;
        ListNode* fast=head;
        ListNode* slow=head;
        for(int i=0;i<n;i++)
            fast=fast->next;
        if(fast==NULL)
            return head->next;   // n==total no of nodes in the list so we have to delete the first element(as nth from end)
        while(fast->next)
        {
            fast=fast->next;
            slow=slow->next;
        }
        slow->next=slow->next->next;
        return head;
    }
};

My first time aprroach:

class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr=head;
        ListNode* prev=NULL;
        while(curr!=NULL)
        {
            ListNode* t=curr->next;
            curr->next=prev;
            prev=curr;
            curr=t;
        }
        return prev;
    }
    void deletion(ListNode*& head, int n)
    {
        if(head==NULL)
            return;
        if(n==0)
        {
            ListNode* t=head;
            head=head->next;
            delete(t);
            return;
        }
        deletion(head->next,n-1);
        
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL)
            return head;
        ListNode* t=reverse(head);
        deletion(t,n-1);
        ListNode* ans=reverse(t);
        return ans;
    }
};
